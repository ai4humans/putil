.. _exdoc-module:

############
exdoc module
############



This module can be used to automatically generate exceptions documentation marked up in `reStructuredText <http://docutils.sourceforge.net/rst.html>`_ with the help of the :ref:`exh-module` and
`cog <http://nedbatchelder.com/code/cog/>`_.

The exceptions to auto-document need to be "traced" before the documentation is generated; tracing consists of calling the methods, functions and/or properties so that all the required :py:meth:`putil.exh.ExHandle.add_exception()`
calls are covered. Exceptions generated by contracts defined using the :ref:`pcontracts-module` are automatically traced when the contracts are checked. A convenient way of tracing a module is to simply run its test suite,
provided that it covers the exceptions that need to be documented.

For example, it is desired to auto-document the exceptions of a module ``my_module.py``, which has tests in ``test_my_module.py``. Then a tracing module ``trace_my_module.py`` can be created to leverage the already written tests:

.. literalinclude:: ./support/trace_my_module_1.py
    :language: python
    :linenos:
    :tab-width: 3

The context manager :py:class:`putil.exdoc.ExDocCxt()` sets up the tracing environment and returns a :py:class:`putil.exdoc.ExDoc()` object that can the be used in the documentation string of each callable to extract the exceptions
documentation. In this example it is assumed that the tests are written using `pytest <http://pytest.org/>`_, but of course any test framework can be used. Another way to trace the module would be to simply call all the functions,
methods or properties that need to be documented. For example:

.. literalinclude:: ./support/trace_my_module_2.py
    :language: python
    :linenos:
    :tab-width: 3

And the actual module ``my_module`` code is (before auto-documentation):

.. literalinclude:: ./support/my_module_original.py
    :language: python
    :linenos:
    :tab-width: 3

A simple shell script can be written to automate the cogging of the ``my_module.py`` file:

.. literalinclude:: ./support/generate-docs.sh
    :language: bash
    :linenos:
    :tab-width: 3

After the script is run and the auto-documentation generated, each callable has a `reStructuredText`_ marked-up ``:raise:`` section:

.. literalinclude:: ./support/my_module.py
    :language: python
    :linenos:
    :tab-width: 3

.. warning:: Due to the limited introspection capabilities of class properties, only properties defined using the `property() <https://docs.python.org/2/library/functions.html#property>`_ built-in function can be documented with
	:py:meth:`putil.exdoc.ExDoc.get_sphinx_autodoc()`. Properties defined by other methods can still be auto-documented with :py:meth:`putil.exdoc.ExDoc.get_sphinx_doc()` and explicitly providing the method/function name.

.. note:: Documentation strings have to be raw (for example, :code:`r""" Docstring """`) to properly display the documentation of exceptions with display multi-line messages

***********
Interpreter
***********

The module has been developed using Python 2.7, but it *should* also work with Python 3.x

******************
External libraries
******************

* Standard Python library
  
* Putil library modules

* Cog (`<http://nedbatchelder.com/code/cog/>`_) for inserting exception documentation automatically in source files

***************************************
Application programming interface (API)
***************************************

Classes
=======

.. automodule:: putil.exdoc
    :members: ExDoc, ExDocCxt
    :undoc-members:
    :show-inheritance:

*******
License
*******

The MIT License (MIT)

Copyright (c) 2013-2015 Pablo Acosta-Serafini

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
